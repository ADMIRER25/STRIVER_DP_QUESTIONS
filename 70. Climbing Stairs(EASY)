//using memoization 
class Solution {
    int f(int n,int dp[])
    {
        if(n == 0) return 1;
        else if(n < 0) return 0;
        else if(dp[n] != -1) return dp[n];
        return dp[n] = f(n-1,dp) + f(n-2,dp);
    }
public:
    
    int climbStairs(int n)
    {
        int dp[n+1];
        memset(dp,-1,sizeof(dp));
        return f(n,dp);
    }
};
------------------------------------------------------------------------------------------------------------
//using tabulation 
class Solution {
public:
    
    int climbStairs(int n)
    {
        int dp[n+1];
        dp[0] = 1;
        dp[1] = 1;

        for(int i = 2; i <= n; i++)
        {
           dp[i]  = dp[i-1] + dp[i-2];
        }
        return dp[n];
    }
};
------------------------------------------------------------------------------------------------------------------
//using space optimization
class Solution {
public:
    
    int climbStairs(int n)
    {
        int prev2 = 1;
        int prev1 = 1;

        for(int i = 2; i <= n; i++)
        {
           int curr  = prev1 + prev2;
           prev2 = prev1;
           prev1 = curr;
        }
        return prev1;
    }
};
