//using memoization 
#include <bits/stdc++.h> 
int helper(int ind ,vector<int> &heights,int dp[])
{
    if(ind == 0) return 0;
    if(ind == 1) return abs(heights[1]-heights[0]);
    
    if(dp[ind] != -1) return dp[ind];
    //from ind to ind-1
    int left = abs(heights[ind] - heights[ind-1]) + helper(ind-1,heights,dp);
    
    //from ind to ind -2;
    int right = abs(heights[ind] - heights[ind-2]) + helper(ind-2,heights,dp);

    return dp[ind] = min(left,right);
}
int frogJump(int n, vector<int> &heights)
{
    int dp[n];
    memset(dp,-1,sizeof(dp));
    
    return helper(n-1,heights,dp);
}
------------------------------------------------------------------------------------------------
//using tabulation 
#include <bits/stdc++.h> 
int frogJump(int n, vector<int> &heights)
{
    if(n == 1) return 0;
    
    int dp[n];
    dp[0] = 0;
    dp[1] = abs(heights[1]-heights[0]);
    
    for(int i = 2; i < n;i++)
    {
        int left = abs(heights[i] - heights[i-1]) + dp[i-1];
        int right = abs(heights[i] - heights[i-2]) + dp[i-2];
        
        dp[i] = min(left,right);
    }
 
    return dp[n-1];
}
---------------------------------------------------------------------------------------------------
//using space optimization 
#include <bits/stdc++.h> 
int frogJump(int n, vector<int> &heights)
{
    if(n == 1) return 0;
    
    int prev2 = 0;
    int prev1 = abs(heights[1]-heights[0]);
    
    for(int i = 2; i < n;i++)
    {
        int left = abs(heights[i] - heights[i-1]) + prev1;
        int right = abs(heights[i] - heights[i-2]) + prev2;
        
        int curr = min(left,right);
        
        prev2 = prev1;
        prev1 = curr;
    }
 
    return prev1;
}
